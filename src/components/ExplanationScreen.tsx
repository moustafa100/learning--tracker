import React from 'react';
import { ArrowLeft, Lightbulb, BookOpen, RefreshCw } from 'lucide-react';
import { DarkModeToggle } from './DarkModeToggle';
import { Checkpoint } from '../types';

interface ExplanationScreenProps {
  checkpoint: Checkpoint;
  onBack: () => void;
  onUnderstood: () => void;
  isDark: boolean;
  onToggleDark: () => void;
}

export const ExplanationScreen: React.FC<ExplanationScreenProps> = ({
  checkpoint,
  onBack,
  onUnderstood,
  isDark,
  onToggleDark
}) => {
  // This would be generated by AI based on the checkpoint and original notes
  const simplifiedExplanation = generateSimplifiedExplanation(checkpoint);
  const keyConcepts = generateKeyConcepts(checkpoint);
  const analogiesAndExamples = generateAnalogiesAndExamples(checkpoint);

  return (
    <div className={`min-h-screen ${isDark ? 'dark bg-slate-900' : 'bg-amber-50'}`}>
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <button
            onClick={onBack}
            className="flex items-center gap-2 px-4 py-2 rounded-lg bg-slate-200 dark:bg-slate-700 hover:bg-slate-300 dark:hover:bg-slate-600 transition-colors"
          >
            <ArrowLeft size={20} />
            Back
          </button>
          <h1 className="text-2xl font-bold text-slate-800 dark:text-white">
            Feynman Teaching Explanation
          </h1>
          <DarkModeToggle isDark={isDark} onToggle={onToggleDark} />
        </div>

        {/* Checkpoint Title */}
        <div className="mb-8 text-center">
          <h2 className="text-xl font-semibold text-slate-700 dark:text-slate-300 mb-2">
            {checkpoint.title}
          </h2>
          <p className="text-slate-600 dark:text-slate-400">
            {checkpoint.description}
          </p>
        </div>

        {/* Explanation Sections */}
        <div className="space-y-8">
          {/* Simplified Explanation Section */}
          <section className={`p-6 rounded-xl ${isDark ? 'bg-slate-800' : 'bg-white'} shadow-lg`}>
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                <BookOpen className="text-blue-600 dark:text-blue-400" size={24} />
              </div>
              <h3 className="text-xl font-semibold text-slate-800 dark:text-white">
                üìö SIMPLIFIED EXPLANATION
              </h3>
            </div>
            <div className="prose prose-slate dark:prose-invert max-w-none">
              {simplifiedExplanation.map((paragraph, index) => (
                <p key={index} className="text-slate-700 dark:text-slate-300 mb-4">
                  {paragraph}
                </p>
              ))}
            </div>
          </section>

          {/* Key Concepts Section */}
          <section className={`p-6 rounded-xl ${isDark ? 'bg-slate-800' : 'bg-white'} shadow-lg`}>
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-amber-100 dark:bg-amber-900 rounded-lg">
                <Lightbulb className="text-amber-600 dark:text-amber-400" size={24} />
              </div>
              <h3 className="text-xl font-semibold text-slate-800 dark:text-white">
                üí° KEY CONCEPTS
              </h3>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {keyConcepts.map((concept, index) => (
                <div
                  key={index}
                  className={`p-4 rounded-lg ${isDark ? 'bg-slate-700' : 'bg-amber-50'} border border-slate-200 dark:border-slate-600`}
                >
                  <h4 className="font-semibold text-slate-800 dark:text-white mb-2">
                    {concept.term}
                  </h4>
                  <p className="text-slate-600 dark:text-slate-400 text-sm">
                    {concept.definition}
                  </p>
                </div>
              ))}
            </div>
          </section>

          {/* Analogies & Examples Section */}
          <section className={`p-6 rounded-xl ${isDark ? 'bg-slate-800' : 'bg-white'} shadow-lg`}>
            <div className="flex items-center gap-3 mb-4">
              <div className="p-2 bg-green-100 dark:bg-green-900 rounded-lg">
                <RefreshCw className="text-green-600 dark:text-green-400" size={24} />
              </div>
              <h3 className="text-xl font-semibold text-slate-800 dark:text-white">
                üîÑ ANALOGIES & EXAMPLES
              </h3>
            </div>
            <div className="space-y-4">
              {analogiesAndExamples.map((item, index) => (
                <div
                  key={index}
                  className={`p-4 rounded-lg ${isDark ? 'bg-slate-700' : 'bg-green-50'} border border-slate-200 dark:border-slate-600`}
                >
                  <h4 className="font-semibold text-slate-800 dark:text-white mb-2">
                    {item.type === 'analogy' ? 'üîÑ Analogy' : 'üìù Example'}
                  </h4>
                  <p className="text-slate-600 dark:text-slate-400">
                    {item.content}
                  </p>
                  {item.explanation && (
                    <p className="text-sm text-slate-500 dark:text-slate-500 mt-2 italic">
                      {item.explanation}
                    </p>
                  )}
                </div>
              ))}
            </div>
          </section>
        </div>

        {/* Action Button */}
        <div className="mt-8 text-center">
          <button
            onClick={onUnderstood}
            className="px-6 py-3 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg transition-colors"
          >
            I Understand Now
          </button>
        </div>
      </div>
    </div>
  );
};

// Helper functions (would be replaced with AI-generated content)
function generateSimplifiedExplanation(checkpoint: Checkpoint): string[] {
  return [
    `This is a simplified explanation of "${checkpoint.title}" in plain language.`,
    "The core idea can be broken down into these fundamental principles...",
    "Think of it as a system where these components interact in specific ways..."
  ];
}

function generateKeyConcepts(checkpoint: Checkpoint): Array<{term: string, definition: string}> {
  return [
    { term: `${checkpoint.title} Concept 1`, definition: "Clear definition of the first key concept" },
    { term: "Concept 2", definition: "Clear definition of the second key concept" },
    { term: "Concept 3", definition: "Clear definition of the third key concept" }
  ];
}

function generateAnalogiesAndExamples(checkpoint: Checkpoint): Array<{type: 'analogy' | 'example', content: string, explanation?: string}> {
  return [
    { 
      type: 'analogy', 
      content: `This concept (${checkpoint.title}) is like a bicycle chain transferring energy...`,
      explanation: "Just as a chain transfers pedaling motion to wheels, this concept transfers..."
    },
    { 
      type: 'example', 
      content: `A real-world example of ${checkpoint.title} is how solar panels convert sunlight into electricity...`,
      explanation: "This demonstrates the principle of energy conversion in action"
    }
  ];
}